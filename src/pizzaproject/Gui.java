/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pizzaproject;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import javax.swing.JOptionPane;

/**
 *
 * @author Ali
 */
public class Gui extends javax.swing.JFrame {
    PriorityQueue <Integer>  people = new PriorityQueue<>();
       PriorityQueue <Integer> pizza = new PriorityQueue<>();
        List <Integer> buffer = new LinkedList();
        List <Integer> buffer2 = new LinkedList();/**
     * Creates new form Gui
     */
    public Gui() {
        initComponents();
        satisfaction.setVisible(false);
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hungry_traveler = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        output2 = new javax.swing.JTextArea();
        change = new javax.swing.JCheckBox();
        slice = new javax.swing.JTextField();
        satisfaction = new javax.swing.JLabel();
        time = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFocusable(false);
        getContentPane().setLayout(null);

        hungry_traveler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hungry_travelerActionPerformed(evt);
            }
        });
        hungry_traveler.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                hungry_travelerKeyPressed(evt);
            }
        });
        getContentPane().add(hungry_traveler);
        hungry_traveler.setBounds(177, 29, 75, 20);

        jLabel1.setText("Required pizza size");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(22, 29, 145, 20);

        output.setEditable(false);
        output.setColumns(20);
        output.setLineWrap(true);
        output.setRows(5);
        jScrollPane2.setViewportView(output);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(30, 150, 330, 31);

        jButton1.setText("Check");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(160, 240, 73, 23);

        output2.setEditable(false);
        output2.setColumns(20);
        output2.setLineWrap(true);
        output2.setRows(5);
        jScrollPane1.setViewportView(output2);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(30, 190, 330, 31);

        change.setText("Solution 2");
        change.setOpaque(false);
        change.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeActionPerformed(evt);
            }
        });
        getContentPane().add(change);
        change.setBounds(300, 30, 89, 23);

        slice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sliceActionPerformed(evt);
            }
        });
        slice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sliceKeyPressed(evt);
            }
        });
        getContentPane().add(slice);
        slice.setBounds(177, 63, 75, 20);
        getContentPane().add(satisfaction);
        satisfaction.setBounds(80, 270, 240, 20);
        getContentPane().add(time);
        time.setBounds(250, 240, 150, 20);

        jLabel2.setText("Available pizza size");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(22, 66, 91, 14);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pizzaproject/r.png"))); // NOI18N
        jLabel4.setText("assda");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(0, 0, 430, 310);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hungry_travelerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hungry_travelerKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            try { int value  = Integer.valueOf(hungry_traveler.getText().trim());
                if(value<1 || hungry_traveler.getText().length()<1)
                {
                JOptionPane.showMessageDialog(null, value+" is not a valid value");
                                    hungry_traveler.setText("");

                    return;

                }
                if(!change.isSelected())
                people.add(value);
                else 
                    buffer.add(value);
            
            }
            catch(NumberFormatException ex)
            {
                JOptionPane.showMessageDialog(null, "Please Enter a valid value");
                
            }
            finally
            {
                hungry_traveler.setText("");
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_hungry_travelerKeyPressed

    private void hungry_travelerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hungry_travelerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hungry_travelerActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        long excution_t  =    System.currentTimeMillis();
        if(!change.isSelected()){ 
            if(pizza.size()!=people.size()){
                JOptionPane.showMessageDialog(null,"Total number of pizza slices must equal ther number of the hungry travelers\n"
                       +"(pizza slices ):" + pizza.size()+":"+people.size()+" (hungry travelers)");
                return;
            }
            if(people.isEmpty()) { 
                JOptionPane.showMessageDialog(null,"The Input field cannot be left empty");
                return;
            }
         
        int [] sorted_people=  new int[people.size()];
        int [] sorted_pizza_slices= new int [people.size()];

        for(int i=0; !people.isEmpty(); ++i )
        {

            sorted_people[i]= people.remove();
        }
        for(int i=0; !pizza.isEmpty(); ++i )
        {
            sorted_pizza_slices[i]= pizza.remove();
        }
        boolean satisfied = false;
        int j=0;
        output.setText("Required  slice to satisfy :");
        output2.setText("Existing slice to satisfy :");
        for(int i=0; i<sorted_pizza_slices.length&&!satisfied; ++i)
        {
            if(sorted_pizza_slices[i]>=sorted_people[j]){
                output.append(sorted_people[j]+" ");
                output2.append(sorted_pizza_slices[i]+" ");
                ++j;
            }
            if(j==sorted_people.length)
            satisfied = true;
        }
        if(satisfied)
        satisfaction.setText("All travellers have been satisfied");
        else if(sorted_people.length>0)
        satisfaction.setText("Couldnt satisfy all the travellers");
        satisfaction.setVisible(true);
        excution_t =  System.currentTimeMillis()-excution_t;
        time.setText("Excution Time: "+excution_t+" ms");
       pizza.clear();
        people.clear();
       } 
       
       else
       {
           
            if(buffer.size()!=buffer2.size()){
                JOptionPane.showMessageDialog(null,"Total number of pizza slices must equal ther number of the hungry travelers\n"+
                        + buffer2.size()+"(pizza slices ):"+buffer.size()+" (hungry travelers)");
                return;
            }
             if(buffer2.isEmpty()){
                                JOptionPane.showMessageDialog(null,"The Input field cannot be left empty");
                return;
             }
           
          int [] sorted_people = new int[buffer.size()];
          int [] sorted_pizza = new int[buffer.size()];
          int m=0;
      for(Integer x : buffer)
      {
      sorted_people[m] =x;
      ++m;
      }
      m=0;
        for(Integer x : buffer2)
      {
      sorted_pizza[m] =x;
      ++m;
      }
    
        
        Radix.radixsort(sorted_people, sorted_people.length);
        Radix.radixsort(sorted_pizza, sorted_pizza.length);
        boolean satisfied = false;
        int j=0;
               output.setText("Required slice size to satisfy :");
        output2.setText("Existing slice to satisfy :");
        for(int i=0; i<sorted_pizza.length&&!satisfied; ++i)
        {
            if(sorted_pizza[i]>=sorted_people[j]){
                output.append(sorted_people[j]+" ");
                output2.append(sorted_pizza[i]+" ");
                ++j;
            }
            if(j==sorted_people.length)
                satisfied = true;
        }
        if(satisfied)
        satisfaction.setText("All travellers have been satisfied");
        else if(sorted_people.length>0)
        satisfaction.setText("Couldnt satisfy all the travellers");
        satisfaction.setVisible(true);  
         excution_t =  System.currentTimeMillis()- excution_t;
        time.setText("Excution Time: "+excution_t+" ms");
        buffer.clear();
        buffer2.clear();
           
    }
        
       
        // TODO add your handling code here: */
    }//GEN-LAST:event_jButton1ActionPerformed

    private void changeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeActionPerformed
                pizza.clear();
        people.clear();
buffer.clear();        // TODO add your handling code here:
    }//GEN-LAST:event_changeActionPerformed

    private void sliceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sliceKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            try { int value  = Integer.valueOf(slice.getText().trim());
                if(value<1 || slice.getText().length()<1)
                {
                JOptionPane.showMessageDialog(null, value+" is not a valid value");
                                    slice.setText("");

                    return;

                }
                if(!change.isSelected())
                pizza.add(value);
                else 
                    buffer2.add(value);
            
            }
            catch(NumberFormatException ex)
            {
                JOptionPane.showMessageDialog(null, "Please Enter a valid value");
                
            }
            finally
            {
                slice.setText("");
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_sliceKeyPressed

    private void sliceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sliceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sliceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox change;
    private javax.swing.JTextField hungry_traveler;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea output;
    private javax.swing.JTextArea output2;
    private javax.swing.JLabel satisfaction;
    private javax.swing.JTextField slice;
    private javax.swing.JLabel time;
    // End of variables declaration//GEN-END:variables
}
